
/*
	Project WiTCHHUNT: A complete ASCII Mini RPG engine/game developed in 1.5 months!
	Copyright (C) 2007 - 2008 CCPS Solutions, Richard Marks, Rafael Hermosillo, Jeff Stagg

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License along
	with this program; if not, write to the Free Software Foundation, Inc.,
	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

////////////////////////////////////////////////////////////////////////////////
// ABILITY_macros.h
////////////////////////////////////////////////////////////////////////////////
#ifndef __LIBRARY_ABILITY_MACROS_H__
#define __LIBRARY_ABILITY_MACROS_H__

////////////////////////////////////////////////////////////////////////////////
// maximum number of unique abilities supported
////////////////////////////////////////////////////////////////////////////////
 #ifndef NUM_ABILITIES
  #define NUM_ABILITIES 1024
 #endif

////////////////////////////////////////////////////////////////////////////////
// variable name for the global ability map
////////////////////////////////////////////////////////////////////////////////
 #ifndef GLOBAL_ABILITY_MAP
  #define GLOBAL_ABILITY_MAP ____global_ability_map____
 #endif

//////////////////////////////////////////////////////////////////////////////// 
// variable name for the global master ability list
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef GLOBAL_MASTER_ABILITY_LIST
  #define GLOBAL_MASTER_ABILITY_LIST ____global_master_ability_list____
 #endif

////////////////////////////////////////////////////////////////////////////////
// create a global instance of the common_association type
////////////////////////////////////////////////////////////////////////////////
 #ifndef CREATE_ABILITY_MAP
  #define CREATE_ABILITY_MAP common_association GLOBAL_ABILITY_MAP
 #endif

////////////////////////////////////////////////////////////////////////////////
// called by main application as a global; creates the array of abilities
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef CREATE_MASTER_ABILITY_LIST
  #define CREATE_MASTER_ABILITY_LIST ABILITYLIST GLOBAL_MASTER_ABILITY_LIST [NUM_ABILITIES];
 #endif

////////////////////////////////////////////////////////////////////////////////
// associate an int with a string
////////////////////////////////////////////////////////////////////////////////
 #ifndef XMAP_ABILITY
  #define XMAP_ABILITY(camap,alias,index) Common :: mapintoncamap  (camap, #alias , index)
 #endif

////////////////////////////////////////////////////////////////////////////////
// associate an int with a string, and place in the global ability map
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef MAP_ABILITY
  #define MAP_ABILITY(alias,index) Common :: mapintoncamap (GLOBAL_ABILITY_MAP, #alias , index)
 #endif
 
//////////////////////////////////////////////////////////////////////////////// 
// returns the int associated with string
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef getAbilityIndex
  #define getAbilityIndex(camap,alias) Common :: getmappedindex (camap, #alias )
 #endif

//////////////////////////////////////////////////////////////////////////////// 
// returns the int associated with string
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef getAbilityIndexFromString
  #define getAbilityIndexFromString(camap,stralias) Common :: getmappedindex (camap, stralias )
 #endif


//////////////////////////////////////////////////////////////////////////////// 
// return type for abilities
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef ABILRET
  #define ABILRET std::string 
 #endif

//////////////////////////////////////////////////////////////////////////////// 
// use to define a new ability in the ABILITY class
////////////////////////////////////////////////////////////////////////////////  
 #ifndef DEFABILITY
  #define DEFABILITY(abi)   ABILRET ABILITY :: abi (ENTITY* user, ENTITY& target)
 #endif

//////////////////////////////////////////////////////////////////////////////// 
// used by helper macros gives the ability function address
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef ABILITYADDR
  #define ABILITYADDR(abi)   &ABILITY:: abi
 #endif

//////////////////////////////////////////////////////////////////////////////// 
// access to the requested ability used in a call to useAbility ()
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef MAL
  #define MAL(index) GLOBAL_MASTER_ABILITY_LIST [index].m_fpkAbility
 #endif

//////////////////////////////////////////////////////////////////////////////// 
// add an ability to the list
////////////////////////////////////////////////////////////////////////////////  
 #ifndef ADD_ABILITY
  #define ADD_ABILITY(alias,method_name) \
  { \
   int index = getAbilityIndex (GLOBAL_ABILITY_MAP, alias); \
   if (index < 0) { \
   cout << "Cannot add unmapped ability {" << #alias << "}" << endl; \
   } else { \
  GLOBAL_MASTER_ABILITY_LIST [index].m_strAlias   = #alias ; \
  GLOBAL_MASTER_ABILITY_LIST [index].m_fpkAbility = ABILITYADDR (method_name); \
  } \
  }
 #endif 

//////////////////////////////////////////////////////////////////////////////// 
// quick global to class var hack
//////////////////////////////////////////////////////////////////////////////// 
 #ifndef CMAL
  #define CMAL(index)  m_MAL [index].m_fpkAbility 
 #endif

//////////////////////////////////////////////////////////////////////////////// 
// end of safe include
//////////////////////////////////////////////////////////////////////////////// 
#endif


